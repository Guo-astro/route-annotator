language: node_js

sudo: false

# build options and AWS keys for publishing binaries
# note: you'll need to generate your own keys for publishing a separate project
env:
  global:
    - secure: "hAKqjucdMAYxT6LrmDUEsZSFS0e5O06MtxJNnVoT3744a2kw4cmYHist1Z32eWcDX6JnP60oXC3dxJt8Bxos8LurFNeAUlyF1dwnry+5wGMQJ5FIterpZJyIjz7l5LsXQO/2WEHLP7BfeEXgKg9Vru7NlaZIIpFEebqxebPi6giYtiDEcBh7Ye/w5KvgmdCdo2mM7kXdRkKv/9PpkOV/GhXDBZUfFGf0QcEfcG/3LhjabYErH0M8ZZlTyDxQPpfWIKFvOjlrNvJxHCVgeW2lhRLSi3lyM3qLular0aEiRK5tgIDhHy6iNqiOVOJyjrKSaAtrVRfOJskNX84VXPh5uEQ7vGj0aPB+rYZ9KcblevZoQPyX5RNsx6pCh0qW/bk5pSHCxlSdndsEtHJZZt1ct4VHSrqGrNTV/uK+oH461bSCLYpO/BTwcLamljI+NmLfyRMjoCZRNJf3Erp+HYtFdiU6gtxZwZRdMvDIO7ZZN+0Uwyseap7do/OhZmg8V4zUoF0hgj8f7zLMFLU3yxDIEe/OFGfv4OgItaHZuZb1DstxgmxzPiC7nBferRbGNduNT9JOixfD5LGq+oEn+Sx8AqL8lGmddISvb4Ywq0p6KpGhHL3qAveDJ2bubMEZvUvFfjQSfVuSJXMCS4CTqBxKPZ6egemwkgoHLzs5zzjUiN8="
    - secure: "e5EPBS6N+kr2pDf9mfwsnwUyQ1bhDiXwMgoZaGf+D6y5Vvtiyeoa5lp/Qul0+pVDn76HFGjQJ7bBSGQ+lyCVvqG/fa56DA8bZPnsa7cy6mb2seddHHhATEY/VXqOntuYI6GE3DnD+mmVcwYCqGXqsjvCwHh4WcX/FOpHm/RB9lQcHvgrg99kLkHRc93Hf0QsWApcmps0B2yV7NodiV+rp4xUP5jqMYWx8nD7cR7ykOVQEQ8E+6ZDUUJJ2JCVENc7Ien6JvjTfvyxI1Uf32tct714QdwDaQYYwSdcpN9LgCE8Iey1egMxdvs1z1Ypn8G2WwfjtG2wjzrvMfB5wOXCmSc0Ivt5syXB50NS/pHmT0Fhb/z6YNZ+ycFPYW/qgj7XPmGQH5ZfjxwPMhdWPmBMvErA/7ojI9gT9Rfy9dySsXnSgskQqaiEWfYaR3P7qAE+Ue1znex/G0C67PlAEV9fX0qB+cD9yl8FDfbAZpc75HjRhViVedxu7Y0vGV5FoOMh9M9M1hT1JBIKqYuiR77LiUlwH5vu5lG7IQFCF8Jmt7mjvAFl1BGDwIUeU2foin3qBvUVkzSe8BFakT3xuMLOwzbHyv0/W1BbHksjf7zVbUvoocMvhMsdqxsu1b2DOX1u2myvXyoSN2VRKBz31oj+bN/0paV2IZQOJMn0NQBpcSE="

# enable c++11/14 builds
addons:
  apt:
    sources: [ 'ubuntu-toolchain-r-test' ]
    packages: [ 'libstdc++-4.9-dev' ]

install:
  # set up the environment by installing mason and clang++
  - ./scripts/setup.sh --config local.env
  # put mason and clang++ on PATH
  - source local.env
  - node -v
  - which node
  - clang++ -v
  - which clang++
  - make ${BUILDTYPE}

# run tests
# We use before_script rather than script to ensure fast failure (the script section continues even after an error)
# https://docs.travis-ci.com/user/customizing-the-build#Breaking-the-Build
before_script:
  - npm test
  # after successful tests, publish binaries if specified in commit message
  - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")

# override script default (npm test) to do nothing (we test in before_script)
script:
  - true

# the matrix allows you to specify different operating systems and environments to 
# run your tests and build binaries
matrix:
  include:
    # linux publishable node v4/release
    - os: linux
      env: BUILDTYPE=release
      node_js: 4
    # linux publishable node v4/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 4
    # linux publishable node v6
    - os: linux
      env: BUILDTYPE=release
      node_js: 6
    # linux publishable node v6/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 6
    # osx publishable node v4
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 4
    # osx publishable node v6
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 6
    # Sanitizer build node v4/Debug
    - os: linux
      env: BUILDTYPE=debug TOOLSET=asan
      node_js: 4
      # Overrides `install` to set up custom asan flags
      install:
        - ./scripts/setup.sh --config local.env
        # put mason and clang++ on PATH
        - source local.env
        # Note: to build without stopping on errors remove the -fno-sanitize-recover=all flag
        # You might want to do this if there are multiple errors and you want to see them all before fixing
        - export CXXFLAGS="${MASON_SANITIZE_CXXFLAGS} -fno-sanitize-recover=all"
        - export LDFLAGS="${MASON_SANITIZE_LDFLAGS}"
        - make ${BUILDTYPE}
      # Overrides `script` to disable asan LD_PRELOAD before publishing
      before_script:
        - export LD_PRELOAD=${MASON_LLVM_RT_PRELOAD}
        - export ASAN_OPTIONS=fast_unwind_on_malloc=0:${ASAN_OPTIONS}
        - npm test
        - unset LD_PRELOAD
        # after successful tests, publish binaries if specified in commit message
        - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")
    # g++ build (default builds all use clang++)
    - os: linux
      env: BUILDTYPE=debug CXX="g++-6" CC="gcc-6"
      node_js: 4
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libstdc++-6-dev
            - g++-6
      # Overrides `install` to avoid initializing clang toolchain
      install:
        - make ${BUILDTYPE}
      # Overrides `script` to disable publishing
      before_script:
        - npm test
    # Coverage build
    - os: linux
      env: BUILDTYPE=debug CXXFLAGS="--coverage" LDFLAGS="--coverage"
      node_js: 4
      # Overrides `script` to publish coverage data to codecov
      before_script:
        - ./scripts/format.sh
        - npm test
        - mason install llvm-cov ${MASON_LLVM_RELEASE}
        - mason link llvm-cov ${MASON_LLVM_RELEASE}
        - which llvm-cov
        - curl -S -f https://codecov.io/bash -o codecov
        - chmod +x codecov
        - ./codecov -x "llvm-cov gcov" -Z
