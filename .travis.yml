language: node_js

sudo: false

# build options and AWS keys for publishing binaries
# note: you'll need to generate your own keys for publishing a separate project
env:
  global:
    - secure: "E1JyPpHANhzp6FQLaS1jNysXm2UsrpZXKFpYP0XTluA/G2XAxrP6NQ6ObkZ/GmRJHsk0C6nwBCc7QI4Lf6veKiJ01K9cPErZLsQ7bamNxNKRp1D47q/etT0fV2Mj7QXGt+ff4NmrzqMjmaCQOB+u9kxd72MzbBePMGFHHLxLrdRk27W/aEpcOw1Li3ljlouAish7ynQLZrlW5Y674Flt27EooKjyHf7RJKSc7Hnz+BFwuBL8YYdS3jm0qPwJQKHoK313cw3G879BpdbQyGHAwiMMJbGr89W+NynwaFDU13UWCe1R8tLXW27BJLgo2Ng68GYZifDDAb1FmoRNZbHsUPjc1Pe9/RZLGb8x5bLdwb50rrGnuUi+uiAHZ5Zg2YtsJqm82YBSvxWIf2XEhfyiEOekzLG8rESIef0DiQHgOfu04GNHcKmCvwqQVi8tqtffhkoWWykNosU8QTymcGtr7B83h4qr+/LdQnOi34q0BA7ASn1WsKJZH/h+N0aiCd8zqBnMnoRT6TsdJEaLbCLVT9CBwzRC1JzqaQ+RuJJVoyqaNON2A5h98MBmTxpoocZo6to2KgCJZ5Z10b28uG5BbB4FupPcmnrerUkcIvg78c1wZ/gMsvzTcx3JrukEtZ6Rsfd6uFHdv4lRcy0BdEa8iJ1LomygpnAVokOnQHCbR5Q="
    - secure: "EyOTH2rl1DzCiu4Gxjsjz5w4Qt0MXHaPkltwdgDhUwd0f1fxc+ei8Kun9FuOl1BKNOdZzM8hTffKMeOvumOCaWkIQHi9ODTBOGNquHIL1x6b/acz6K1d/wXjn32MOiiHmIG1rzjRI/F0BraAvowwlnYq6+qnmhzjlfIyAzG3W2kFsE3kQvnKKyLbSRbYONv67+bkCPZd/iy0LqQksPmF65E43Kw6sPaVf2SO1NblvPaR2VAxYXQGuD3u65rPF7iMpKEibd9TZPWw72m7x+gPIbGC2CX+YhxhaOmMlI25Z9GPIAyOvnGge3kABj6Mwr6+JI6D6XheMxyhVYP98hAbFmT+7XL6vqTMcxA0gScM+GeZZvintVCqje4a/dGkL9CfcJYhvbQz8FadFln5lPU8KEgNrqqBhVpQ8MSXeIxrE+qQAOy1SCptw2D7VnFfHNYVGzy9P1WsKS8KEDJ/W8x4udmMTrDXU50zGfA+WTrUpdaD6XYUdfDW8AE1WcHP85tWyHgtNUyhpe6J68M2XhlRH7njMJZQSLe9p6jZfn9pEBg5uCA1yJb4mKeE8+EmIDfhqpojPRxMPnTpVF0f4LnKqQc1hpvFIlcSbVuF9CQgMuxf8NZ7NLFlVMAXVDyoTWSO0MNpopFAaXigrKInKWpkG1JOoo+0ohKaHrg/J7haMHk="

# enable c++11/14 builds
addons:
  apt:
    sources: [ 'ubuntu-toolchain-r-test' ]
    packages: [ 'libstdc++-4.9-dev' ]

install:
  # set up the environment by installing mason and clang++
  - ./scripts/setup.sh --config local.env
  # put mason and clang++ on PATH
  - source local.env
  - node -v
  - which node
  - clang++ -v
  - which clang++
  - make ${BUILDTYPE}

# run tests
# We use before_script rather than script to ensure fast failure (the script section continues even after an error)
# https://docs.travis-ci.com/user/customizing-the-build#Breaking-the-Build
before_script:
  - npm test
  # after successful tests, publish binaries if specified in commit message
  - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")

# override script default (npm test) to do nothing (we test in before_script)
script:
  - true

# the matrix allows you to specify different operating systems and environments to 
# run your tests and build binaries
matrix:
  include:
    # linux publishable node v4/release
    - os: linux
      env: BUILDTYPE=release
      node_js: 4
    # linux publishable node v4/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 4
    # linux publishable node v6
    - os: linux
      env: BUILDTYPE=release
      node_js: 6
    # linux publishable node v6/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 6
    # osx publishable node v4
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 4
    # osx publishable node v6
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 6
    # Sanitizer build node v4/Debug
    - os: linux
      env: BUILDTYPE=debug TOOLSET=asan
      node_js: 4
      # Overrides `install` to set up custom asan flags
      install:
        - ./scripts/setup.sh --config local.env
        # put mason and clang++ on PATH
        - source local.env
        # Note: to build without stopping on errors remove the -fno-sanitize-recover=all flag
        # You might want to do this if there are multiple errors and you want to see them all before fixing
        - export CXXFLAGS="${MASON_SANITIZE_CXXFLAGS} -fno-sanitize-recover=all"
        - export LDFLAGS="${MASON_SANITIZE_LDFLAGS}"
        - make ${BUILDTYPE}
      # Overrides `script` to disable asan LD_PRELOAD before publishing
      before_script:
        - export LD_PRELOAD=${MASON_LLVM_RT_PRELOAD}
        - export ASAN_OPTIONS=fast_unwind_on_malloc=0:${ASAN_OPTIONS}
        - npm test
        - unset LD_PRELOAD
        # after successful tests, publish binaries if specified in commit message
        - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")
    # g++ build (default builds all use clang++)
    - os: linux
      env: BUILDTYPE=debug CXX="g++-6" CC="gcc-6"
      node_js: 4
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libstdc++-6-dev
            - g++-6
      # Overrides `install` to avoid initializing clang toolchain
      install:
        - make ${BUILDTYPE}
      # Overrides `script` to disable publishing
      before_script:
        - npm test
    # Coverage build
    - os: linux
      env: BUILDTYPE=debug CXXFLAGS="--coverage" LDFLAGS="--coverage"
      node_js: 4
      # Overrides `script` to publish coverage data to codecov
      before_script:
        - ./scripts/format.sh
        - npm test
        - mason install llvm-cov ${MASON_LLVM_RELEASE}
        - mason link llvm-cov ${MASON_LLVM_RELEASE}
        - which llvm-cov
        - curl -S -f https://codecov.io/bash -o codecov
        - chmod +x codecov
        - ./codecov -x "llvm-cov gcov" -Z
