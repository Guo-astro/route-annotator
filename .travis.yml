language: node_js

sudo: false

# build options and AWS keys for publishing binaries
# note: you'll need to generate your own keys for publishing a separate project
env:
  global:
    secure: R6UrSnY8k0+hu/MhlUjLbDLyouu3ynblQ+SgH6PiVCnpsPuE4+45lob2G4vMIX0minPQSAWJ3oMY1yNH+KB58fkggUKwMCt+Def6adZ9hJD5mJTvmzZneZI2SarwnWUbDYndexSTcHKETbRgljoOorPVIUgPdjYAy/aDP7hrHssRcTDgJF15z6ZsyEvuNGF7RuV5rSWEeRbs60yVfuqLCQgUQCodVBvvb3uTiDMOCV/eS3x9wI+9Dp3jrLlF6vrYs2yTJVQ+PFcLsvmfRK6dSAVo4MO7D46opObSJjLHbZdw+gZm1HMtxjD4YwjmKgEwDB9nUbwdxryvJarbBL119xyHtgpbnx9DW6D7/N/v0m/q+uhMaKRHv8C8qP4oDr1zeJTIEKH/4uS4t/GeXJrC+9kxe42+LqKoNJ711X7F+bvTJn3LssVztp2zdGidrOyKnP6WfoiMQFgHrn75lfTD5NkLIpRK2VOOCpo7hBXRu7MSNcK4SgF/O33QYaGhRpmJsi5i4hkmT/y/+F4Hqsy/b24RWH8R1v5+4gg9DjfHS6cxJkQMf3ufc7zt5uiNMQK/eIvt9y59+jT1sZTOU8smSliFa4NmmSnxlkjSjXeyehq3g1NbkUqKKTgT0sP1+AaY6W8wzBqcBgvlB5TMV2I20LPBFZ9OH6xts07WcGgb8hI=
    secure: SlrNNgWwhxuKsSM9sLvfN+f0WyN6IM1zYQDfm80YvJvl2BjzdtjQyQ76DXWoG02kSfht0LjMvtqj7BbSEyWsHXNqmg++fd+1KQzVeY3abFDC69qvNMCA4IQrKSqdTtqBiYFnQQZPPHZc5PbxssjLfPuzMUy78i0oWp07ph4Qc6Qk1zQ4EDV0AKEfbLNvUFVjQUDxp0mVPYD0og+D15sVx/HWqWXWobCGKYnWd2PoP5v7dXm3FExozF9iMRJcPGL0SVdDun6OcyMOCEYIzbJ5cy4VjYwTOlzzbiuIdI46Rulcw85+K6OBGAMQjjTizInIa/rUgR30BaKlen4s5GEEuNN6jEaI2pdQMOwr4Xvqkvhci13JMi9Yc7PVPAJxrDFTw+lo0fE/MheIjtfRyFq4ghIHe+jBbQVaCE5j9h2IBSNXZ4TE73v8u00GOCJAZ5hYIy9fuNo6ipT3pnjSXRa4gE1ppJDF3yPtn8k2crjDlVldlltsoeht23vvLizg22lBH+G0ZvibMIjvh1opfzzJcFf9PQS6BIODMQ4KjZ6cnGiGpVu7emvsWQm37bMrmz8uuXtmpn9XTt39dzPdeNvdbC7r6i2wAcLgilV6H+SnVW8V277NrYpUfFedjpwrPJD7dkZVWpClJ/IOlQ0Sy5ZbUgLb/VpwyPpCPWtA/aoMrI4=

# enable c++11/14 builds
addons:
  apt:
    sources: [ 'ubuntu-toolchain-r-test' ]
    packages: [ 'libstdc++-4.9-dev' ]

install:
  # set up the environment by installing mason and clang++
  - ./scripts/setup.sh --config local.env
  # put mason and clang++ on PATH
  - source local.env
  - node -v
  - which node
  - clang++ -v
  - which clang++
  - make ${BUILDTYPE}

# run tests
# We use before_script rather than script to ensure fast failure (the script section continues even after an error)
# https://docs.travis-ci.com/user/customizing-the-build#Breaking-the-Build
before_script:
  - npm test
  # after successful tests, publish binaries if specified in commit message
  - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")

# override script default (npm test) to do nothing (we test in before_script)
script:
  - true

# the matrix allows you to specify different operating systems and environments to 
# run your tests and build binaries
matrix:
  include:
    # linux publishable node v4/release
    - os: linux
      env: BUILDTYPE=release
      node_js: 4
    # linux publishable node v4/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 4
    # linux publishable node v6
    - os: linux
      env: BUILDTYPE=release
      node_js: 6
    # linux publishable node v6/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 6
    # osx publishable node v4
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 4
    # osx publishable node v6
    - os: osx
      osx_image: xcode8.2
      env: BUILDTYPE=release
      node_js: 6
    # Sanitizer build node v4/Debug
    - os: linux
      env: BUILDTYPE=debug TOOLSET=asan
      node_js: 4
      # Overrides `install` to set up custom asan flags
      install:
        - ./scripts/setup.sh --config local.env
        # put mason and clang++ on PATH
        - source local.env
        # Note: to build without stopping on errors remove the -fno-sanitize-recover=all flag
        # You might want to do this if there are multiple errors and you want to see them all before fixing
        - export CXXFLAGS="${MASON_SANITIZE_CXXFLAGS} -fno-sanitize-recover=all"
        - export LDFLAGS="${MASON_SANITIZE_LDFLAGS}"
        - make ${BUILDTYPE}
      # Overrides `script` to disable asan LD_PRELOAD before publishing
      before_script:
        - export LD_PRELOAD=${MASON_LLVM_RT_PRELOAD}
        - export ASAN_OPTIONS=fast_unwind_on_malloc=0:${ASAN_OPTIONS}
        - npm test
        - unset LD_PRELOAD
        # after successful tests, publish binaries if specified in commit message
        - ./scripts/publish.sh --toolset=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")
    # g++ build (default builds all use clang++)
    - os: linux
      env: BUILDTYPE=debug CXX="g++-6" CC="gcc-6"
      node_js: 4
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libstdc++-6-dev
            - g++-6
      # Overrides `install` to avoid initializing clang toolchain
      install:
        - make ${BUILDTYPE}
      # Overrides `script` to disable publishing
      before_script:
        - npm test
    # Coverage build
    - os: linux
      env: BUILDTYPE=debug CXXFLAGS="--coverage" LDFLAGS="--coverage"
      node_js: 4
      # Overrides `script` to publish coverage data to codecov
      before_script:
        - ./scripts/format.sh
        - npm test
        - mason install llvm-cov ${MASON_LLVM_RELEASE}
        - mason link llvm-cov ${MASON_LLVM_RELEASE}
        - which llvm-cov
        - curl -S -f https://codecov.io/bash -o codecov
        - chmod +x codecov
        - ./codecov -x "llvm-cov gcov" -Z
